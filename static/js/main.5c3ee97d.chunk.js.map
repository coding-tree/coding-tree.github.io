{"version":3,"sources":["components/contexts/ThemeContext.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeProvider","children","useState","theme","setTheme","dateTime","setDateTime","Provider","value","Boolean","window","location","hostname","match","buildDetails","commit","process","REACT_APP_GIT_COMMIT","branch","REACT_APP_GIT_BRANCH","tag","REACT_APP_GIT_TAG","url","REACT_APP_HOMEPAGE_URL","buildTime","REACT_APP_BUILD_TIME","env","console","log","App","lazy","ReactDOM","render","fallback","style","color","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAEaA,EAAeC,wBAAc,SAE7BC,EAAgB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACjBC,mBAAS,SADQ,mBACpCC,EADoC,KAC7BC,EAD6B,OAEXF,mBAAS,OAFE,mBAEpCG,EAFoC,KAE1BC,EAF0B,KAI3C,OAAO,kBAACR,EAAaS,SAAd,CAAuBC,MAAO,CAACL,QAAOC,WAAUC,WAAUC,gBAAeL,K,gHCI9DQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCRNH,OAAOI,aAAe,CACpBC,OAAQC,8CAAYC,qBACpBC,OAAQF,8CAAYG,qBACpBC,IAAKJ,8CAAYK,kBACjBC,IAAKN,8CAAYO,uBACjBC,UAAWR,8CAAYS,sBAGzB,IAAMC,EAAMV,aACZW,QAAQC,IAAI,MAAOF,GAEjB,IAAMG,EAAMC,gBAAK,kBAAM,uDACvBC,IAASC,OACP,kBAAC,WAAD,CACEC,SACE,6BACE,wBAAIC,MAAO,CAACC,MAAO,SAAnB,gBAGJ,kBAAC,IAAD,KACE,kBAACN,EAAD,QAGJO,SAASC,eAAe,SDgGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5c3ee97d.chunk.js","sourcesContent":["import React, {createContext, useState} from 'react';\n\nexport const ThemeContext = createContext('light');\n\nexport const ThemeProvider = ({children}) => {\n  const [theme, setTheme] = useState('light');\n  const [dateTime, setDateTime] = useState('day');\n\n  return <ThemeContext.Provider value={{theme, setTheme, dateTime, setDateTime}}>{children}</ThemeContext.Provider>;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {lazy, Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport {unregister} from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nimport {BrowserRouter} from 'react-router-dom';\nimport {ThemeProvider} from './components/contexts/ThemeContext';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nwindow.buildDetails = {\n  commit: process.env.REACT_APP_GIT_COMMIT,\n  branch: process.env.REACT_APP_GIT_BRANCH,\n  tag: process.env.REACT_APP_GIT_TAG,\n  url: process.env.REACT_APP_HOMEPAGE_URL,\n  buildTime: process.env.REACT_APP_BUILD_TIME,\n};\n\nconst env = process.env.NODE_ENV;\nconsole.log('ENV', env);\nif (env === 'production') {\n  const App = lazy(() => import('./components/BuildPage/BuildApp'));\n  ReactDOM.render(\n    <Suspense\n      fallback={\n        <div>\n          <h1 style={{color: '#fff'}}>Loading...</h1>\n        </div>\n      }>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Suspense>,\n    document.getElementById('root')\n  );\n} else {\n  const App = lazy(() => import('./App'));\n\n  ReactDOM.render(\n    <Suspense\n      fallback={\n        <div>\n          <h1 style={{color: '#fff'}}>Loading...</h1>\n        </div>\n      }>\n      <BrowserRouter>\n        <ThemeProvider>\n          <App />\n        </ThemeProvider>\n      </BrowserRouter>\n    </Suspense>,\n    document.getElementById('root')\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nunregister();\n"],"sourceRoot":""}