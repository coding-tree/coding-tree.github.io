{"version":3,"sources":["components/BuildPage/components/Input.js","components/BuildPage/components/Contact.js","components/BuildPage/configuration.js","components/BuildPage/components/Formik.js"],"names":["FormControl","styled","div","StyledInput","input","props","component","css","StyledLabel","label","StyledError","Input","name","type","placeholder","htmlFor","as","Field","id","SendButton","button","isSubmitting","StyledWrapper","TitleWrapper","h2","StyledInfo","StyledLink","a","Contact","errors","hasErrors","Object","entries","length","constructor","Link","to","disabled","prod","userId","process","USER_ID","templateId","TEMPLATE_ID","Formik","withFormik","mapPropsToValues","person","email","message","validationSchema","Yup","shape","min","max","required","handleSubmit","resetForm","toastOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","className","templateParams","from_name","from_email","to_name","message_html","reply_to","emailjs","config","then","toast","success","catch","error"],"mappings":"qlCAIA,IAAMA,EAAcC,IAAOC,IAAV,KAKXC,EAAcF,IAAOG,MAAV,KAQb,SAAAC,GAAK,MACe,aAApBA,EAAMC,WACNC,YADA,QASEC,EAAcP,IAAOQ,MAAV,KAKXC,EAAcT,IAAOC,IAAV,KAiCFS,EAvBD,SAAC,GAMR,IALLC,EAKI,EALJA,KACAH,EAII,EAJJA,MAII,IAHJI,YAGI,MAHG,OAGH,MAFJP,iBAEI,MAFQ,QAER,EADJQ,EACI,EADJA,YAEA,OACE,kBAACd,EAAD,KACE,kBAACQ,EAAD,CAAaO,QAASH,GAAOH,GAC7B,kBAACN,EAAD,CACEa,GAAIC,IACJH,YAAaA,EACbD,KAAMA,EACNP,UAAWA,EACXM,KAAMA,EACNM,GAAIN,IAEN,kBAAC,IAAD,CAAcN,UAAWI,EAAaE,KAAMA,M,i4BCrDlD,IAAMO,EAAalB,IAAOmB,OAAV,KAcF,SAAAf,GAAK,OAAKA,EAAMgB,aAAe,WAAa,iBAIpDC,EAAgBrB,IAAOC,IAAV,KAObqB,EAAetB,IAAOuB,GAAV,KAOZC,EAAaxB,IAAOC,IAAV,KAIVwB,EAAazB,IAAO0B,EAAV,KAkDDC,EA9CC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQR,EAAmB,EAAnBA,aACnBS,EACJC,OAAOC,QAAQH,GAAQI,OAAS,GAAKJ,EAAOK,cAAgBH,OAE9D,OACE,kBAACT,EAAD,KACE,kBAACC,EAAD,iDACA,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEX,KAAK,SACLH,MAAM,uBACNK,YAAY,6CAEd,kBAAC,EAAD,CACEF,KAAK,QACLC,KAAK,QACLJ,MAAM,eACNK,YAAY,sBAEd,kBAAC,EAAD,CACEF,KAAK,UACLH,MAAM,kCACNK,YAAY,wCACZR,UAAU,aAEZ,kBAACmB,EAAD,iDACkC,IAChC,kBAACC,EAAD,CAAYV,GAAImB,IAAMC,GAAG,cAAzB,sDAKF,kBAACjB,EAAD,CACEkB,SAAUP,GAAaT,EACvBA,aAAcA,EACdL,GAAG,SACHH,KAAK,UAEJQ,EAAe,iBAAc,gBAGlC,kBAAC,IAAD,Q,kBCnFSiB,G,OALF,CACXC,OAAQC,8CAAYC,QACpBC,WAAYF,8CAAYG,cCOpBC,EAASC,YAAW,CACxBC,iBAAkB,YAChB,MAAO,CACLC,OAF8C,EAA7BA,QAEC,GAClBC,MAH8C,EAArBA,OAGT,GAChBC,QAJ8C,EAAdA,SAIZ,KAIxBC,iBAAkBC,MAAaC,MAAM,CACnCH,QAASE,MACNE,IAAI,GAAI,qDACRC,IAAI,IAAK,sDACTC,SAAS,yBACZP,MAAOG,MACJH,MAAM,8BACNO,SAAS,+BAGdC,aAAc,cAAgD,IAA7CT,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,QAAaQ,EAAgB,EAAhBA,UACrCC,EAAe,CACnBC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,UAAW,YAETC,EAAiB,CACnBC,UAAWpB,EACXqB,WAAYpB,EACZqB,QAAS,oBACTC,aAAcrB,EACdsB,SAAUvB,GAGZwB,OACQ,QAASC,EAAO/B,WAAYwB,EAAgBO,EAAOlC,QACxDmC,MAAK,WAEJ,OADAjB,IACOkB,IAAMC,QAAQ,+BAAsBlB,MAE5CmB,OAAM,kBACLF,IAAMG,MACJ,uEACApB,QA9CKb,CAkDZjB,GAEYgB","file":"static/js/10.b4c24735.chunk.js","sourcesContent":["import React from \"react\";\nimport { Field, ErrorMessage } from \"formik\";\nimport styled, { css } from \"styled-components\";\n\nconst FormControl = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledInput = styled.input`\n  height: 50px;\n  border-radius: 4px;\n  border: none;\n  padding-left: 1.3rem;\n  margin-bottom: 1rem;\n  font-family: \"Alegreya Sans\", sans-serif;\n  font-size: 1rem;\n  ${props =>\n    props.component === \"textarea\" &&\n    css`\n      padding-top: 1rem;\n      resize: none;\n      max-height: 150px;\n      height: 150px !important;\n    `}\n`;\n\nconst StyledLabel = styled.label`\n  font-size: 1rem;\n  padding-bottom: 0.5rem;\n`;\n\nconst StyledError = styled.div`\n  height: 50px;\n  background-color: #f40000;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  padding-left: 1.3rem;\n  margin-bottom: 1rem;\n`;\n\nconst Input = ({\n  name,\n  label,\n  type = \"text\",\n  component = \"input\",\n  placeholder\n}) => {\n  return (\n    <FormControl>\n      <StyledLabel htmlFor={name}>{label}</StyledLabel>\n      <StyledInput\n        as={Field}\n        placeholder={placeholder}\n        type={type}\n        component={component}\n        name={name}\n        id={name}\n      ></StyledInput>\n      <ErrorMessage component={StyledError} name={name}></ErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Form } from \"formik\";\nimport Input from \"./Input\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst SendButton = styled.button`\n  border: none;\n  transition: 0.3s;\n  background-color: #f9f2e6;\n  color: #23090f;\n\n  &:hover {\n    color: #fff;\n    background-color: #7f2538;\n    transition: 0.3s;\n  }\n  &:disabled {\n    color: #aeb7b3;\n    background-color: #fff;\n    cursor: ${props => (props.isSubmitting ? \"progress\" : \"not-allowed\")};\n  }\n`;\n\nconst StyledWrapper = styled.div`\n  margin-top: 1.5rem;\n  margin-bottom: 4rem;\n  @media only screen and (max-width: 520px) {\n    padding: 0 1rem;\n  }\n`;\nconst TitleWrapper = styled.h2`\n  margin-bottom: 1.5rem;\n  @media only screen and (max-width: 520px) {\n    font-size: 1.6rem;\n  }\n`;\n\nconst StyledInfo = styled.div`\n  margin-bottom: 1.5rem;\n`;\n\nconst StyledLink = styled.a`\n  color: #fff;\n`;\n\nconst Contact = ({ errors, isSubmitting }) => {\n  const hasErrors =\n    Object.entries(errors).length > 0 && errors.constructor === Object;\n\n  return (\n    <StyledWrapper>\n      <TitleWrapper>Lub wypełnij formularz poniżej</TitleWrapper>\n      <Form>\n        <Input\n          name=\"person\"\n          label=\"Imię i nazwisko\"\n          placeholder=\"Wpisz imię i nazwisko (opcjonalnie)\"\n        ></Input>\n        <Input\n          name=\"email\"\n          type=\"email\"\n          label=\"Adres E-mail\"\n          placeholder=\"Wpisz adres email\"\n        ></Input>\n        <Input\n          name=\"message\"\n          label=\"Treść wiadomości\"\n          placeholder=\"Wpisz treść wiadomości\"\n          component=\"textarea\"\n        ></Input>\n        <StyledInfo>\n          Wysyłając formularz akceptujesz{\" \"}\n          <StyledLink as={Link} to=\"/regulamin\">\n            regulamin i politykę prywatności (RODO)\n          </StyledLink>\n        </StyledInfo>\n\n        <SendButton\n          disabled={hasErrors || isSubmitting}\n          isSubmitting={isSubmitting}\n          as=\"button\"\n          type=\"submit\"\n        >\n          {isSubmitting ? \"Wysyłanie\" : \"Wyślij\"}\n        </SendButton>\n      </Form>\n      <ToastContainer></ToastContainer>\n    </StyledWrapper>\n  );\n};\n\nexport default Contact;\n","const prod = {\n  userId: process.env.USER_ID,\n  templateId: process.env.TEMPLATE_ID\n};\n\nexport default prod;\n","import { withFormik } from \"formik\";\nimport Contact from \"./Contact\";\nimport * as Yup from \"yup\";\nimport * as emailjs from \"emailjs-com\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport config from \"../configuration\";\n\nconst Formik = withFormik({\n  mapPropsToValues: ({ person, email, message }) => {\n    return {\n      person: person || \"\",\n      email: email || \"\",\n      message: message || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    message: Yup.string()\n      .min(10, \"Treść wiadomości jest za krótka\")\n      .max(255, \"Treść wiadomości jest za długa\")\n      .required(\"To pole jest wymagane\"),\n    email: Yup.string()\n      .email(\"Podaj poprawny adres email\")\n      .required(\"Adres email jest wymagany\")\n  }),\n\n  handleSubmit: ({ person, email, message }, { resetForm }) => {\n    const toastOptions = {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      className: \"toastify\"\n    };\n    let templateParams = {\n      from_name: person,\n      from_email: email,\n      to_name: \"Józef Rzadkosz\",\n      message_html: message,\n      reply_to: email\n    };\n\n    emailjs\n      .send(\"gmail\", config.templateId, templateParams, config.userId)\n      .then(() => {\n        resetForm();\n        return toast.success(\"Wysłano pomyślnie!\", toastOptions);\n      })\n      .catch(() =>\n        toast.error(\n          \"Coś poszło nie tak, Spróbuj ponownie później...\",\n          toastOptions\n        )\n      );\n  }\n})(Contact);\n\nexport default Formik;\n"],"sourceRoot":""}